JOB KOREA Crawling Program Architecture
======================================

Tool: Selenium with ChromeDriver (auto-installed via webdriver_manager)

Modules:
Implementation Details
=====================

- Authentication (auth.py):
  - Function: `login(driver, config)` - Logs into JOBKOREA using Selenium.
    - Reads `url`, `username`, `password` from `config.ini` [web] section.
    - Uses `WebDriverWait` and `By.XPATH` to locate login fields and submit.
    - Saves session cookies to `session.json` for reuse.
    - Logs success/errors to `crawler.log` (format: timestamp - level - message).
  - Dependencies: `selenium`, `configparser`, `json`, `logging`.
  - Error Handling: Retry login on timeout (3 attempts), log failures.

- Crawling (crawler.py):
  - Class: `SiteCrawler(threading.Thread)` - Background crawler like sample’s `SiteCrawler`.
    - `__init__(config, on_new_callback, on_status_callback)`: Initializes with config and callbacks.
    - `run()`: Logs in, applies filters (sort by "Registration Date", exclude confirmed posts), crawls job listings.
    - `_scan_posts(driver)`: Extracts post ID, title, manager name/phone/email, description using `By.XPATH`.
    - `_filter_new_posts(posts)`: Tracks processed post IDs to avoid duplicates (like `baseline_consultation_no`).
    - Calls `on_new_callback` with new posts, logs to `crawler.log`.
  - Dependencies: `selenium`, `threading`, `logging`, `time`.
  - Config: `refresh_interval` (e.g., 60s), `headless` (True/False) from `config.ini` [web].
  - Error Handling: Use `try-except` and `WebDriverWait` for robust element access.

- GUI (gui.py):
  - Class: `MainWindow(QMainWindow)` - Like sample’s `MainWindow`.
    - Tabs: Crawling (start/stop), Settings (edit `config.ini`, XPath, date range), Logs (show `crawler.log`), Export (select folder).
    - Signals: `status_updated` for crawler updates (like `CrawlerTestWorker.status_updated`).
    - Methods: `_start_crawler()`, `_stop_crawler()`, `_update_status(message)`.
    - Stylesheet: Light-mode like sample’s `light_style`.
  - Dependencies: `PySide6`, `configparser`, `logging`.
  - Config: Reads `config.ini` for initial settings, updates via GUI.
  - Error Handling: `QMessageBox` for user feedback (like sample’s `TemplateManagerTab`).

- Data Export (export.py):
  - Function: `export_to_excel(posts, output_path)` - Saves posts to `jobkorea_data.xlsx`.
    - Uses `pandas.DataFrame` and `openpyxl` to create Excel with columns: Post ID, Title, Manager Name, Phone, Email, Description, Timestamp.
    - Supports appending to existing file or creating new with timestamp (e.g., `jobkorea_data_20250630.xlsx`).
    - Logs export actions to `crawler.log`.
  - Dependencies: `pandas`, `openpyxl`, `pathlib`, `logging`.
  - Config: `output_folder`, `filename_template` from `config.ini` [export].
  - Error Handling: Handle file access errors, invalid paths.

- Deployment:
  - Script: `build.py` - Uses `PyInstaller` to create EXE.
    - Bundles: `auth.py`, `crawler.py`, `gui.py`, `export.py`, `config.ini`.
    - Uses `webdriver_manager` to auto-install ChromeDriver.
    - Creates `README.txt` with setup instructions (edit `config.ini`, run EXE).
  - Dependencies: `PyInstaller`, `webdriver_manager`.
  - Error Handling: Log dependency issues to `crawler.log`.

Data Flow:
- Input: JOBKOREA website (https://www.jobkorea.co.kr/) + config.ini credentials
- Process: Login (auth.py) → Crawl & parse (crawler.py) → Save to Excel (export.py)
- Output: jobkorea_data.xlsx
- GUI: User controls and monitoring via gui.py
- Config/Logs: config.ini for settings, crawler.log for debugging

Files:
- config.ini: Stores URL, credentials, crawling settings (headless, interval, etc.)
- crawler.log: Logs (format: timestamp - level - message)
- jobkorea_data.xlsx: Output Excel file
- architecture.txt: This file
- architecture_diagram.png: Visual diagram
- test_selenium.py: Selenium test script

Project Directory: C:\Users\karth\Projects\jobkorea-crawler

Notes:
- Aligns with sample code: modular, PySide6 GUI, threading, logging
- Check JOBKOREA terms for scraping legality (confirm with customer)
- Test Selenium for CAPTCHAs or JavaScript issues